package generate

import (
  "fmt"

  "dreampicai/view"
  "dreampicai/view/layout"
  "dreampicai/types"
	"dreampicai/view/ui"
)

type ViewData struct {
  Images []types.Image
  FormParams FormParams
  FormErrors FormErrors
}

templ Index(data ViewData) {
  @layout.App(true) {
    <div class="w-full h-[calc(100vh-69px)] flex">
      <div class="w-[400px] border-r border-gray-700 p-4">
        @Form(data.FormParams, data.FormErrors)
      </div>
      <div class="flex-1 bg-base-300">
        @Gallery(data.Images)
      </div>
    </div>
  }
}

type FormErrors struct {
  Prompt        string
  Amount        string
  Credits       bool
  CreditsNeeded int
  UserCredits   int
}

type FormParams struct {
  Prompt string
  Amount int
}

templ Form(params FormParams, errors FormErrors) {
  <form 
    hx-post="/generate"
    hx-swap="outerHTML"
  >
    <div>
      <label class="form-control">
        <div class="label">
          <span class="label-text">Enter your prompt</span>
        </div>

        <textarea 
          class="textarea textarea-bordered h-24" 
          placeholder="A woman in a white dress"
          name="prompt"
        >
          { params.Prompt }
        </textarea>

        if len(errors.Prompt) > 0 {
          <div class="label">
            <span class="label-text text-error">{ errors.Prompt }</span>
          </div>
        }
      </label>

      <label class="form-control mb-4">
        <div class="label">
          <span class="label-text">Select the amount of images</span>
        </div>

        <div class="join">
          for _, amount := range amounts {
            if amount == view.String(params.Amount) {
              <input class="join-item btn" type="radio" name="amount"  value={ amount } aria-label={ amount } checked />
            } else {
              <input class="join-item btn" type="radio" name="amount"  value={ amount } aria-label={ amount } />
            }
          } 
        </div>

        if len(errors.Amount) > 0 {
          <div class="label">
            <span class="label-text text-error">{ errors.Amount }</span>
          </div>
        }
      </label>

      <button class="w-full btn btn-primary">Generate</button>
    </div>
  </form>

  if errors.Credits {
    @ui.CreditsModal(errors.CreditsNeeded, errors.UserCredits)
  }
}

var amounts = []string {
  "1", "2", "4", "8",
}

templ Gallery(images []types.Image) {
  <div class="grid grid-cols-2 md:grid-cols-4 p-4 gap-4" id="gallery">
    for _, image := range images {
      @GalleryImage(image)
    }
  </div>
}

templ GalleryImage(image types.Image) {
  if image.Status == types.ImageStatusCompleted {
    <div class="bg-green-100 aspect-square rounded-xl">
      <img src={ image.ImageLocation } class="h-full w-full object-cover rounded-xl cursor-pointer" />
    </div>
  } else if image.Status == types.ImageStatusFailed {
    <div class="bg-red-100 aspect-square rounded-xl grid place-items-center text-red-300 text-5xl">
      <i class="fa-solid fa-bug"></i>
    </div>
  } else if image.Status == types.ImageStatusPending {
    <div 
      hx-get={ fmt.Sprintf("/generate/image/status/%d", image.ID) }
      hx-trigger="load delay:3s"
      class="bg-yellow-100 aspect-square rounded-xl grid place-items-center"
    >
      <span class="loading loading-spinner loading-lg"></span>
    </div>
  }
}